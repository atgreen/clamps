;;; **********************************************************************
;;; Copyright (c) 2017 Orm Finnendahl <orm.finnendahl@selma.hfmdk-frankfurt.de>
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the Gnu Public License, version 2 or
;;; later. See https://www.gnu.org/licenses/gpl-2.0.html for the text
;;; of this agreement.
;;; 
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; **********************************************************************

(in-package :cm)

#|
(defparameter *pm-not-loaded-error* "recv for portmidi not loaded.")

(defmethod recv ((io portmidi-stream) &key resolution priority) io
           resolution priority (error *pm-not-loaded-error*))

(defmethod recv-stop ((io portmidi-stream)) io
           (error *pm-not-loaded-error*))

(defmethod recv-set! ((io portmidi-stream) hook &key recv-mode)
           recv-mode io hook (error *pm-not-loaded-error*))

(defmethod recv? ((io portmidi-stream)) (error *pm-not-loaded-error*))
|#

(defparameter *time-format* :sec)

(defun set-time-format (fmt)
  (if (member fmt '(:sec :sample :ms))
      (setf *time-format* fmt)
      (error "time-format ~a not supported, must be :sec :sample or :ms!" fmt)))

(defun rts-now ()
  (case *time-format*
    ((:sec) (* (incudine:now) incudine::*sample-duration*))
    ((:sample) (incudine:now))
    ((:ms) (* (incudine:now) incudine::*sample-duration* 1000))))

(defun rts (&rest args)
  (declare (ignore args))
  (incudine:rt-start))

(defun rts? (&optional arg)
  (declare (ignore arg))
  (eq :started (incudine:rt-status)))


(defparameter *rts-thread* nil)

(defun rts-thread? ()
  *rts-thread*)

#|
(defun rts-thread? ()
  (if incudine::*rt-thread* T))
|#

(defun rtserr (fn args)
  (error "Attempt to call ~s without RTS loaded." (cons fn args)))

(defun rts-stop (&rest args) (rtserr 'rts-stop args))

(defun rts-pause (&rest args) (rtserr 'rts-pause args))

(defun rts-continue (&rest args) (rtserr 'rts-continue args))

;;; (defun rts-enqueue (&rest args) (rtserr 'rts-enqueue args))

(defun rts-enqueue (&rest args)
  (break "rts-enqueue: ~a" args))
