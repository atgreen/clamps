* cl-refs
*** _Orm Finnendahl <orm.finnendahl@selma.hfmdk-frankfurt.de>_

Implementation of a ref system for maintaining state by declarative
computing. ref cells are value holders sharing state across multiple
other refs (optionally computing values in relation to them). Setting
a ref will automatically update all related other refs.

** Install

*** Using Quicklisp
   - clone repository into ~/quicklisp/local-projects

   - issue =(ql:quickload :cl-refs)=
   
** License

gpl 2.0 or later


Copyright (c) 2024 Orm Finnendahl <orm.finnendahl@selma.hfmdk-frankfurt.de>

** Examples

   #+BEGIN_SRC lisp
     ;; define a ref cell

     (defvar x (make-ref 0.5))

     ;; getter and setter

     (get-value x) ;-> 0.5

     (set-value x 1.3) ;-> 1.3

     (get-value x) ; -> 1.3

     ;; make-computed defines a computed ref cell: It has the signature
     ;; (make-computed (fn1 &optional fn2)). The first function in the
     ;; argument list defines how to set the value of the ref cell
     ;; depending on other ref-cells. The computed ref cell will update,
     ;; whenever any of the ref cells contained in this function
     ;; changes. The second function defines what should happen to referred
     ;; cells, when setting the value of the computed cell directly using
     ;; #'set-value. This function has to take care of updating the
     ;; necessary ref cells appropriately. In order to avoid multiple
     ;; updates or circular dependencies, the function %set-value is used,
     ;; which is called in the context of a dynamic variable *refs-seen*,
     ;; which is a list containing all ref-cells, which already have been
     ;; updated in the context of the call to #'set-value of the computed
     ;; cell.

     (defvar y (make-computed
                (lambda () (* (get-value x) 2))
                (lambda (val) (%set-value x (/ val 2)))))

     ;; if x has been set to 1.3 as in the code above:

     (get-value y) ; -> 2.6

     (set-value y 5) ; -> 5

     (get-value y) ; -> 5

     (get-value x) ; -> 2.5
   #+END_SRC
